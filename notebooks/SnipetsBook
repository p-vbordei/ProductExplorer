def clean_data(dataframe, column_name):
    # Extract single values from lists
    dataframe[column_name] = dataframe[column_name].apply(lambda x: x[0] if isinstance(x, list) and len(x) == 1 else [x][0] if not isinstance(x, list) else x)

    # Replace missing values with NaN
    dataframe[column_name].replace(['', 'NA', 'N/A', 'missing', 'NaN', 'unknown', 'Unknown', ['Unknown']], np.nan, inplace=True)

    # Drop NaN values
    dataframe.dropna(subset=[column_name], inplace=True)

    # Replace missing values with 'Unknown'
    dataframe[column_name].fillna(value='unknown', inplace=True)

    # Drop 'Unknown' values
    dataframe = dataframe[dataframe[column_name] != 'unknown']
    
    return dataframe

def transform_string(input_string):
    words = input_string.split('_')  # Split the string by underscores
    capitalized_words = [word.capitalize() for word in words]  # Capitalize each word
    transformed_string = ' '.join(capitalized_words)  # Join the words back into a string
    return transformed_string



####### IN VERSIUNEA ASTA DATELE SUNT INCARCATE COLOANA CU COLOANA #######

df_index_columns = ['anger',
 'asin',
 'asin_variant',
 'delight',
 'disappointment',
 'id',
 'media',
 'negative_sentiment',
 'positive_sentiment',
 'rating',
 'sentiment']
df_data_columns = ['review_summary', 'product_facts', 'improvements_expected','issues_identified', "review",'anger_reason',  'delight_reason', 'disappointment_reason', 'time', 'season', 'weather', 'user_description','title','where_product_is_used','how_product_is_used']
df_index = df[df_index_columns].copy()

from langchain.document_loaders import DataFrameLoader

for column in df_data_columns:
    df_data = df[[column] + df_index_columns].copy()
    df_data = clean_data(df_data, column)
    df_data[column] = transform_string(column) + ": " + df_data[column].astype(str)
    df_data['record_type'] = column

    try:
        loader = DataFrameLoader(df_data, page_content_column=column)
        documents = loader.load()
    except:
        print(column)
        pass



####### IN VERSIUNEA ASTA DATELE SUNT INLANTUITE INTR-UN SINGUR STRING #######

df_index_columns = ['anger',
 'asin',
 'asin_variant',
 'delight',
 'disappointment',
 'id',
 'media',
 'negative_sentiment',
 'positive_sentiment',
 'rating',
 'sentiment']

df_data_columns = ['review_summary', 'product_facts', 'improvements_expected','issues_identified', "review",'anger_reason',  'delight_reason', 'disappointment_reason', 'time', 'season', 'weather', 'user_description','title','where_product_is_used','how_product_is_used']
df_index = df[df_index_columns].copy()
df_data = df[df_data_columns]
data_dict = df_data.to_dict(orient='records')
df_data_page = df_index.copy()
df_data_page['data'] = str(data_dict)
loader = DataFrameLoader(df_data_page, page_content_column='data')
documents = loader.load()






####### CREAT ASIN LIST

import pandas as pd

asin_list = ['B07XCRVK2Y', 'B07X7YFZWG', 'B07XCRT49W', 'B07Q899BPB', 'B07QXMLSS5', 'B01M4OV4Q4', 'B085Q4W3WX', 'B09R9MMW6J', 'B07ZJ8HRN8', 'B085Q3TLF8', 'B07ZJ8FDPK', 'B09VBZZ9C8']

# create a pandas dataframe
df = pd.DataFrame(asin_list, columns=['asin'])

# save the dataframe as a CSV file
df.to_csv('asin_list.csv', index=False)



################### Products 2A #######


# https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb

User_Prompt_1 = """
PRODUCT TITLE and PRODUCT BULLETS from an ecommerce site \
delimited with triple backticks. ``` \
If information isn't present, use "unknown" value. \
Product Summary  : summary to give feedback to the \
product development department, responsible for researching \
and developing the product. Max 100 words. \

PRODUCT TITLE:```Magnetic board for children's learning and fun```

PRODUCT BULLETS: ```\
[" The included pencil works great to bring the magnet balls to the surface. \
It is very sturdy and has survived multiple drops."," \
Nice for a preschooler, love playing with it because of the satisfying \"click\" noises and the fun of a novel toy.\
"," Randomly doodles, practicing abcs and shapes, playing tic tac toe, or making more elaborate designs. Have fun with it!\
"," Magnetic boards are Really brilliant idea and innovative way of teaching child how to write, \
They are happy to trace the letters with this magnetic board and quickly learning letters and numbers.\
"," We bring it on long car rides, restaurant waiting for dinner, anywhere they need to be entertained. \
Much better for their brains than screen time! Each age uses it a bit differently which is neat to see.","\
MADE OF CHILD SAFE, NON-TOXIC, BPA-FREE and lead-free, tested in CPC accredited lab to ensure quality and safety"]\
```"""


AI_Prompt_1 = """\
{\
"Product Summary": "A durable magnetic board for children's learning and fun.\
Includes a pencil for magnet balls, offering a satisfying 'click' sound. \
Suitable for various ages and healthier than screen time.",\
"What is in the box": "Magnetic board , pencil",\
"Technical Facts": "Child safe, non-toxic, BPA-free, lead-free, tested in CPC accredited lab",\
"Features": "Satisfying 'click' noises, various uses (doodling, practicing letters and shapes, playing games)",\
"How the product is used": "Doodling, practicing letters/shapes, playing games",\
"Where the product is used": "Car rides, restaurants, entertainment situations",\
"User Description": "Preschoolers",\
"Packaging": "unknown",\
"Season": "unknown"\
}"""



chatbot_responses = dict()

GPT_MODEL = "gpt-3.5-turbo-0613"

for i in product.index:
    print(i)
    title  = product['title'][i]
    asin  = product['asin'][i]
    bullets = product['feature_bullets'][i]

    # Get the product review
    print(asin)
    print(bullets)
    print(title)

   function_args = json.loads(response_message["function_call"]["arguments"])
   function_response = fuction_to_call(
        location=function_args.get("location"),
        unit=function_args.get("unit"),
            )


    messages = [
        {"role": "system", "content": "You are a highly analytic product researcher in a product development team"},
        {"role": "user", "content": User_Prompt_1},
        {"role": "assistant", "content": AI_Prompt_1},
        {"role": "user", "content": f"PRODUCT TITLE:``` {title} ``` PRODUCT BULLETS:```{bullets}```"},
        {"role": "function", "name": "describe_product", "content": function_response,}

    ]

    print("""Send to gpt
          """)

    # Send the prompt to the chatbot and get the response
    response = openai.ChatCompletion.create(
        model=GPT_MODEL,
        messages=messages,
        functions=functions,
        function_call={"name": "describe_product"},
        temperature=0
    )

    # Process the response and store in the dictionary

    chatbot_responses[asin] = response["choices"][0]["message"]["function_call"]
    product.loc[i, 'product_description_data'] = chatbot_responses[asin]
    print(response["choices"][0]["message"]["function_call"])


###############################


# https://lucolivi.medium.com/the-proper-way-to-make-calls-to-chatgpt-api-52e635bea8ff

ASYNC


import asyncio
import aiohttp
from tenacity import (
    retry,
    stop_after_attempt,
    wait_random_exponential,
)

headers = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {OPENAI_API_KEY}"
}

class ProgressLog:
    def __init__(self, total):
        self.total = total
        self.done = 0

    def increment(self):
        self.done = self.done + 1

    def __repr__(self):
        return f"Done runs {self.done}/{self.total}."

@retry(wait=wait_random_exponential(min=1, max=60), stop=stop_after_attempt(20), before_sleep=print, retry_error_callback=lambda _: None)
async def get_completion(content, session, semaphore, progress_log):
    async with semaphore:

        async with session.post("https://api.openai.com/v1/chat/completions", headers=headers, json={
            "model": "gpt-3.5-turbo",
            "messages": [{"role": "user", "content": content}],
            "temperature": 0
        }) as resp:

            response_json = await resp.json()

            progress_log.increment()
            print(progress_log)

            return response_json["choices"][0]['message']["content"]

async def get_completion_list(content_list, max_parallel_calls, timeout):
    semaphore = asyncio.Semaphore(value=max_parallel_calls)
    progress_log = ProgressLog(len(content_list))

    async with aiohttp.ClientSession(timeout=aiohttp.ClientTimeout(timeout)) as session:
        return await asyncio.gather(*[get_completion(content, session, semaphore, progress_log) for content in content_list])
    

    ####

    messages = [
    {"role": "user", "content": f"REVIEW: ```{review}```"},
]

# Send the request to the LLM and get the response
response =  chat_completion_request(
    messages=messages,
    functions=functions,
    function_call={"name": "review_data_function"},
    temperature=0,
    model=GPT_MODEL
)

# Process the response and store in the dictionary

main_product_summary_response = response.json()["choices"]




#########
###############
Sample de extras info din rapid api in async, fara timing


import asyncio
import nest_asyncio
nest_asyncio.apply()
import aiohttp
import json
import firebase_admin
from firebase_admin import credentials
from firebase_admin import firestore

# Your ASINs
asin_list = [
    'B08X2324ZL', 'B09MQ689XL', 'B0BCW8X98V', 'B09NR5JW8Y', 
    'B0BHS5VPCZ', 'B0BCVY1DHR', 'B0BNXCJ3MV', 'B0BCTTCSBZ', 
    'B091325ZMB', 'B093HCXGC9', 'B0BL6MR1KN', 'B09PN11Y65', 
    'B0BLNBS36G', 'B0BVZ3H4MB', 'B0BW8Y2B8Z', 'B0BDFZPNVY'
]

# Amazon Scraper details
base_url = "https://h-amazon-data-scraper2.p.rapidapi.com/products/"
api_key = "70201ee0c8ed29661bc6ae00a84341fb"
headers = {
    "X-RapidAPI-Key": "4da31a08e5mshaca05d98a3d9d6ep1fffb1jsn019717508cc8",
    "X-RapidAPI-Host": "h-amazon-data-scraper2.p.rapidapi.com"
}

# Firestore details
cred_path = '/Users/vladbordei/Documents/Development/ProductExplorer/notebooks/productexplorerdata-firebase-adminsdk-ulb3d-465f23dff3.json'

# Initialize Firestore
cred = credentials.Certificate(cred_path)
if not firebase_admin._apps:
    firebase_admin.initialize_app(cred)
db = firestore.client()

async def get_product_details(asin):
    async with aiohttp.ClientSession() as session:
        url = f"{base_url}{asin}"
        async with session.get(url, headers=headers, params={"api_key": api_key}) as response:
            return await response.text()

async def get_product_reviews(asin):
    async with aiohttp.ClientSession() as session:
        url = f"{base_url}{asin}/reviews"
        async with session.get(url, headers=headers, params={"api_key": api_key}) as response:
            return await response.text()

def update_firestore(asin, details, reviews):
    doc_ref = db.collection('products').document(asin)
    doc_ref.set({
        'details': json.loads(details),
        'reviews': json.loads(reviews)
    }, merge=True)

async def main():
    for asin in asin_list:
        details = await get_product_details(asin)
        reviews = await get_product_reviews(asin)
        update_firestore(asin, details, reviews)

loop = asyncio.get_event_loop()
loop.run_until_complete(main())



#########
###################


# %%
# Data Testing

import json
from pathlib import Path

file_path = '/Users/vladbordei/Documents/Development/ProductExplorer/data/external/review_jsons/reviews(B0BCTTCSBZ)_1691131250529.json'
# Read product JSON
with open(file_path) as f:
    product_data = json.load(f)
    product_data = product_data[0]
    asin = product_data['asin']
    print(asin)
    print(product_data['title'])

    ##########






##############


# %%

reviewFunctions = [
    {
        "name": "reviewDataFunction",
        "description": "retreive information from reviews",
        "parameters": {
            "type": "object",
            "properties": {
                "reviewSummary": {
                    "type": "string",
                    "description": "A brief summary of the review. Eg: Good product overall, but improvements can be made in battery life and noise levels."
                },
                "buyerMotivation": {
                    "type": "string",
                    "description": "Reasons why the buyer purchased the product. Eg: to replace an old product, to try out a new product, to give as a gift"
                },
                "customerExpectations": {
                    "type": "string",
                    "description": "Expectations the customer had before purchasing the product. Eg: to be able to use the product for a long time, to be able to use the product in a variety of situations, to be able to use the product for a specific purpose"
                },
                "howTheProductIsUsed": {
                    "type": "string",
                    "description": "Information about what the product is used for or about how the product is used. Eg: doodling, practicing letters/shapes, playing games"
                },
                "whereTheProductIsUsed": {
                    "type": "string",
                    "description": "Suggested locations or situations where the product can be used. Eg: car, restaurant, garden, public parks"
                },
                "userDescription": {
                    "type": "string",
                    "description": "Description of the user for the product. Eg: children, preschoolers, basketball players, mothers, office workers"
                },
                "packaging": {
                    "type": "string",
                    "description": "Description of the product's packaging. Eg: sturdy recyclable box, wrapped in plastic, great for gifting"
                },
                "season": {
                    "type": "string",
                    "description": "Eg: fall and winter"
                },
                "whenTheProductIsUsed": {
                    "type": "string",
                    "description": "Time of day or week of use. Eg: early in the morning"
                },
                "appraisal": {
                    "type": "string",
                    "description": "observations on price or value"
                },
                "quality": {
                    "type": "string",
                    "description": "Observations on the quality. Eg: poor quality, great quality"
                },
                "durability": {
                    "type": "string",
                    "description": "Observations on the durability. Eg: not durable, durable, very durable"
                },
                "easeOfUse": {
                    "type": "string",
                    "description": "Observations on the ease of use. Eg: not easy to use, easy to use"
                },
                "setupAndInstructions": {
                    "type": "string",
                    "description": "Observations on the setup. Eg: not easy to set up, easy to set up, easy to follow instructions, not clear instructions"
                },
                "noiseAndSmell": {
                    "type": "string",
                    "description": "Observations on the noise level or smell. Eg: too loud, quiet, squeaky, smells like roses, plastic smell"
                },
                "sizeAndFit": {
                    "type": "string",
                    "description": "Observations on the fit. Eg: too tight, too loose, fits well, too small, too big"
                },
                "dangerAppraisal": {
                    "type": "string",
                    "description": "Observations on the safety of the product. Eg: dangerous, hazardous, safe, can break and harm, safe for children"
                },
                "designAndAppearance": {
                    "type": "string",
                    "description": "Observations on the design and appearance. Eg: not attractive, attractive, love the design, love the appearance"
                },
                "partsAndComponents": {
                    "type": "string",
                    "description": "Observations on the parts and components. Eg: missing parts, all parts included, parts are easy to assemble"
                },
                "issues": {
                    "type": "string",
                    "description": "If specified. Actionable observations on product problems to be addressed. Thorough detailing [max 100 words]. Eg: the product started to rust after one year, although I was expecting it to last 5 years before rusting."
                },
            },
            "required": ["reviewSummary", "buyerMotivation", "customerExpectations", "howTheProductIsUsed", "whereTheProductIsUsed", "appraisal","userDescription", "packaging", "season", "whenTheProductIsUsed", "price", "quality", "durability", "easeOfUse", "setupAndInstructions", "noiseAndSmell", "colors", "sizeAndFit", "dangerAppraisal", "designAndAppearance", "partsAndComponents", "issues"]
        },
    }
]

# %%
############
reviewFunctions = [
    {
        "name": "reviewDataFunction",
        "description": "tag reviews with attributes",
        "parameters": {
            "type": "object",
            "properties": {
                "buyerMotivationReviews": {
                    "type": "object",
                    "description": "Reviews that described buyer motivation.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "description": "IDs of reviews that described buyer motivation."
                        },
                        "buyerMotivation": {
                            "type": "string",
                            "description": "Reasons why the buyer purchased the product. Eg: to replace an old product, to try out a new product, to give as a gift"
                        }
                    }
                },
                "partsAndComponentsReviews": {
                    "type": "object",
                    "description": "Reviews that described parts and components.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "description": "IDs of reviews that described parts and components."
                        },
                        "partsAndComponents": {
                            "type": "string",
                            "description": "Observations on the parts and components. Eg: missing parts, all parts included, parts are easy to assemble"
                        }
                    }
                }
            },
            "required": ["buyerMotivationReviews", "partsAndComponentsReviews"]
        }
    }
]

# %%


reviewFunctions = [
    {
        "name": "reviewDataFunction",
        "description": "tag reviews with attributes",
        "parameters": {
            "type": "object",
            "properties": {
                "buyerMotivationReviews": {
                    "type": "object",
                    "description": "Reviews that described buyer motivation.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "IDs of reviews that described buyer motivation."
                        },
                        "buyerMotivation": {
                            "type": "string",
                            "description": "Reasons why the buyer purchased the product."
                        }
                    }
                },
                "partsAndComponentsReviews": {
                    "type": "object",
                    "description": "Reviews that described parts and components.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "IDs of reviews that described parts and components."
                        },
                        "partsAndComponents": {
                            "type": "string",
                            "description": "Observations on the parts and components."
                        }
                    }
                }
            },
            "required": ["buyerMotivationReviews", "partsAndComponentsReviews"]
        }
    }
]



#############
for quotes



marketUserAnalysisReviewFunctions = [
    {
        "name": "marketUserAnalysis",
        "description": "Extract quotes from reviews based on instructions where identified properties apply. Include context.",
        "parameters": {
            "type": "object",
            "properties": {
                "useCaseReviews": {
                    "type": "object",
                    "description": "Discuss specific scenarios or uses of the product.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "quotes": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                        }
                    }
                },
                "productComparisonReviews": {
                    "type": "object",
                    "description": "Compare the product to competitors.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "quotes": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                        }
                    }
                },
                "featureRequestReviews": {
                    "type": "object",
                    "description": "Suggest new features or enhancements.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "quotes": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                        }
                    }
                },
                "usageFrequencyReviews": {
                    "type": "object",
                    "description": "Reviews discussing how often the product is used.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "quotes": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                        }
                    }
                },
                "customerDemographicsReviews": {
                    "type": "object",
                    "description": "Reviews providing insight into the demographics of users.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "quotes": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                        }
                    }
                }
            }
        }
    }
]


functionalEmotionalAnalysisReviewFunctions = [
    {
        "name": "functionalEmotionalAnalysis",
        "description": "Extract information from reviews based on functional and emotional outcomes users expect, using JTBD framework. Be sure to include full Voice of Customer examples. Provide context and be specific. Longer answers are better.",
        "parameters": {
            "type": "object",
            "properties": {
                "functionalJobReviews": {
                    "type": "object",
                    "description": "Reviews describing the main tasks the product performs.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "functionalJobs": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Main tasks or problems the product solves."
                        }
                    }
                },
                "socialJobReviews": {
                    "type": "object",
                    "description": "Reviews about how using the product impacts social perception.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "socialJobs": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "How users want to be seen by others using the product."
                        }
                    }
                },
                "emotionalJobReviews": {
                    "type": "object",
                    "description": "Reviews about the emotional satisfaction from the product.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "emotionalJobs": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Feelings or states users aim to achieve with the product."
                        }
                    }
                },
                "supportingJobReviews": {
                    "type": "object",
                    "description": "Reviews about related tasks that support the main job.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "supportingJobs": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Tasks or activities that aid the main function of the product."
                        }
                    }
                },
                "painPointsReviews": {
                    "type": "object",
                    "description": "Reviews highlighting issues or dissatisfaction areas with the product.",
                    "properties": {
                        "reviewID": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        },
                        "painPoints": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            },
                            "description": "Specific challenges or problems customers encountered."
                        }
                    }
                }
            }
        }
    }
]

#############



marketUserAnalysisReviewFunctions = [
    {
        "name": "marketUserAnalysis",
        "description": "Group reviews by specific topics. Each topic is described in two sentences. Extract associated review ids.",
        "parameters": {
            "type": "object",
            "properties": {
                "useCase": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the specific use case."
                            },
                            "id": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "productComparison": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the comparison topic."
                            },
                            "id": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "featureRequest": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the feature request."
                            },
                            "id": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "usageFrequency": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies usage frequency discussed."
                            },
                            "id": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "customerDemographics": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the demographic segment."
                            },
                            "id": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
]

functionalEmotionalAnalysisReviewFunctions = [
    {
        "name": "functionalEmotionalAnalysis",
        "description": "Group reviews by functional and emotional outcomes from the JTBD framework. Each topic is described in two sentences. Extract associated review ids.",
        "parameters": {
            "type": "object",
            "properties": {
                "functionalJob": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the functional job. Main tasks or problems the product solves."
                            },
                            "id": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "socialJob": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the social job. How users want to be seen by others using the product."
                            },
                            "id": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "emotionalJob": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the emotional job. Feelings or states users aim to achieve with the product"
                            },
                            "id": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "supportingJob": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the supporting job. Tasks or activities that aid the main function of the product."
                            },
                            "id": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                },
                "painPoints": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the pain point. Specific challenges or problems customers encountered."
                            },
                            "id": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
]






###########
Before moving to just tagging. This is deeply nested, clusters and gets quotes

marketUserAnalysisReviewFunctions = [
    {
        "name": "marketUserAnalysis",
        "description": "Group reviews by specific topics, extracting associated review IDs and quotes for each topic.",
        "parameters": {
            "type": "object",
            "properties": {
                "useCaseReviews": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the specific use case."
                            },
                            "reviewID": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "IDs for reviews discussing this use case."
                            },
                            "quotes": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Quotes from reviews discussing this use case."
                            }
                        }
                    }
                },
                "productComparisonReviews": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the comparison topic."
                            },
                            "reviewID": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "IDs for reviews making this comparison."
                            },
                            "quotes": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Quotes from reviews making this comparison."
                            }
                        }
                    }
                },
                "featureRequestReviews": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the feature request."
                            },
                            "reviewID": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "IDs for reviews suggesting this feature."
                            },
                            "quotes": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Quotes from reviews suggesting this feature."
                            }
                        }
                    }
                },
                "usageFrequencyReviews": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies usage frequency discussed."
                            },
                            "reviewID": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "IDs for reviews discussing this frequency."
                            },
                            "quotes": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Quotes from reviews discussing this frequency."
                            }
                        }
                    }
                },
                "customerDemographicsReviews": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                                "description": "Identifies the demographic segment."
                            },
                            "reviewID": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "IDs for reviews from this demographic."
                            },
                            "quotes": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                },
                                "description": "Quotes from reviews from this demographic."
                            }
                        }
                    }
                }
            }
        }
    }
]


#################


# ##################
# reviews_processing.py
# %%
import asyncio
from tqdm import tqdm
import time
import logging
import pandas as pd
logging.basicConfig(level=logging.INFO)
import tiktoken
import json

try:
    from src import app
    from src.reviews_data_processing_utils import process_datapoints, quantify_observations, generate_batches, add_uid_to_reviews, aggregate_all_categories, extractTagsForReview
    from src.firebase_utils import initialize_firestore, get_clean_reviews , write_reviews_to_firestore, save_cluster_info_to_firestore, write_insights_to_firestore
    from src.openai_utils import get_completion_list_multifunction
    from src.reviews_clustering import cluster_reviews, label_clusters
    from src.investigations import update_investigation_status
except ImportError:
    from reviews_data_processing_utils import process_datapoints, quantify_observations, generate_batches, add_uid_to_reviews, aggregate_all_categories, extractTagsForReview
    from firebase_utils import initialize_firestore, get_clean_reviews , write_reviews_to_firestore, save_cluster_info_to_firestore, write_insights_to_firestore
    from openai_utils import get_completion_list_multifunction
    from reviews_clustering import cluster_reviews, label_clusters
    from investigations import update_investigation_status

# %%

# %%
# Allocate short Ids to reviews
updatedReviewsList = add_uid_to_reviews(reviewsList)

# Prepare Review Batches
reviewBatches = generate_batches(updatedReviewsList, max_tokens=1000)


# %%
# Generate Content List for Batches
contentList = []

for batch in reviewBatches:
    batch_review = f"\n\n <Review uIds>  will be followed by <Review Rating> and than by  `review text`:"
    batch_review += "\n\n".join([f"<{review_id}>\n,<{review_rating}>\n,`{review_text}`" for review_id, review_rating, review_text in batch])
    
    messages = [
        {"role": "user", "content": batch_review},
    ]
    contentList.append(messages)

logging.info("Content list prepared.")
# %%

# Define functions for data extraction
marketUserAnalysisReviewFunctions = [
    {
        "name": "marketUserAnalysis",
        "description": "Naming follows the JTBD framework. Group reviews on topics for each type of job and be sure to that each label is described in two sentences. Extract associated review ids.",
        "parameters": {
            "type": "object",
            "properties": {
                "useCase": {
                    "description": "Identifies the specific use case.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                            },
                            "uid": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                },
                "productComparison": {
                    "description": "Compare the product to competitors.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                            },
                            "uid": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                },
                "featureRequest": {
                    "description": "Identifies the requested features or enhancements.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                            },
                            "uid": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                },
                "usageFrequency": {
                    "description": "Identifies the  patterns of usage frequency discussed.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                            },
                            "uid": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                },
                "customerDemographics": {
                    "description": "Identifies the different demographic segments.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                            },
                            "uid": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
]

functionalEmotionalAnalysisReviewFunctions = [
    {
        "name": "functionalEmotionalAnalysis",
        "description": "Naming follows the JTBD framework. Group reviews on topics for each type of job and be sure to that each label is described in two sentences. Extract associated review ids.",
        "parameters": {
            "type": "object",
            "properties": {
                "functionalJob": {
                    "description": "Identifies main tasks or problems the product solves.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                            },
                            "uid": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                },
                "socialJob": {
                    "description": "Identifies how users want to be seen by others using the product.",
                    "type": "array",
                    "items": {      
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                            },
                            "uid": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                },
                "emotionalJob": {
                    "description": "Identifies the feelings or states users aim to achieve with the product",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                            },
                            "description": {
                                "type": "string",
                            },
                            "uid": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                },
                "supportingJob": {
                    "description": "Identifies the tasks or activities that aid the main function of the product.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                            },
                            "uid": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                },
                "painPoints": {
                    "description": "Identifies the different pain points, specific challenges or problems customers encountered.",
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "label": {
                                "type": "string",
                            },
                            "uid": {
                                "type": "array",
                                "items": {
                                    "type": "number"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
]


# %%
GPT_MODEL = 'gpt-3.5-turbo-16k'

async def main():
    # List of function sets
    functionsList = [
        marketUserAnalysisReviewFunctions,
        functionalEmotionalAnalysisReviewFunctions
    ]
    
    # List of function calls
    functionsCallList = [
        {"name": "marketUserAnalysis"},
        {"name": "functionalEmotionalAnalysis"}
    ]
    
    responses = await get_completion_list_multifunction(contentList, functionsList, functionsCallList, GPT_MODEL=GPT_MODEL)
    return responses

responses = asyncio.run(main())


# %%
evalResponses = []

functionsCallList = [
        {"name": "marketUserAnalysis"},
        {"name": "functionalEmotionalAnalysis"} ]

response_index = 0
try:
    for batch in reviewBatches:
        for function in functionsCallList:
            item = responses[response_index]
            # Extracting the data from the response item
            data = item['function_call']['arguments']
            evalData = json.loads(data)
            evalResponses.append(evalData)
            response_index += 1
except Exception as e:
    logging.error(f"Error processing response item at index {response_index}: {e}")
    logging.error(f"Data causing the error: {data}")

# %%
try:
    aggregatedResponses = aggregate_all_categories(evalResponses)
except Exception as e:
    logging.error(f"Error in aggregating responses: {e}")
    aggregatedResponses = {}

# %%

# Updating the reviewsList to include tags
try:
    for reviewDict in updatedReviewsList:
        reviewUid = reviewDict['uid']
        tagsForReview = {}
        for evalData in aggregatedResponses:
            tags = extractTagsForReview(reviewUid, evalData)
            tagsForReview.update(tags)
        if tagsForReview:
            reviewDict['tags'] = tagsForReview
except Exception as e:
    logging.error(f"Error updating review list with tags for UID {reviewUid}: {e}")

# %%


############

