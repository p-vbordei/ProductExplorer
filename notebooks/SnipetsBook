def clean_data(dataframe, column_name):
    # Extract single values from lists
    dataframe[column_name] = dataframe[column_name].apply(lambda x: x[0] if isinstance(x, list) and len(x) == 1 else [x][0] if not isinstance(x, list) else x)

    # Replace missing values with NaN
    dataframe[column_name].replace(['', 'NA', 'N/A', 'missing', 'NaN', 'unknown', 'Unknown', ['Unknown']], np.nan, inplace=True)

    # Drop NaN values
    dataframe.dropna(subset=[column_name], inplace=True)

    # Replace missing values with 'Unknown'
    dataframe[column_name].fillna(value='unknown', inplace=True)

    # Drop 'Unknown' values
    dataframe = dataframe[dataframe[column_name] != 'unknown']
    
    return dataframe

def transform_string(input_string):
    words = input_string.split('_')  # Split the string by underscores
    capitalized_words = [word.capitalize() for word in words]  # Capitalize each word
    transformed_string = ' '.join(capitalized_words)  # Join the words back into a string
    return transformed_string



####### IN VERSIUNEA ASTA DATELE SUNT INCARCATE COLOANA CU COLOANA #######

df_index_columns = ['anger',
 'asin',
 'asin_variant',
 'delight',
 'disappointment',
 'id',
 'media',
 'negative_sentiment',
 'positive_sentiment',
 'rating',
 'sentiment']
df_data_columns = ['review_summary', 'product_facts', 'improvements_expected','issues_identified', "review",'anger_reason',  'delight_reason', 'disappointment_reason', 'time', 'season', 'weather', 'user_description','title','where_product_is_used','how_product_is_used']
df_index = df[df_index_columns].copy()

from langchain.document_loaders import DataFrameLoader

for column in df_data_columns:
    df_data = df[[column] + df_index_columns].copy()
    df_data = clean_data(df_data, column)
    df_data[column] = transform_string(column) + ": " + df_data[column].astype(str)
    df_data['record_type'] = column

    try:
        loader = DataFrameLoader(df_data, page_content_column=column)
        documents = loader.load()
    except:
        print(column)
        pass



####### IN VERSIUNEA ASTA DATELE SUNT INLANTUITE INTR-UN SINGUR STRING #######

df_index_columns = ['anger',
 'asin',
 'asin_variant',
 'delight',
 'disappointment',
 'id',
 'media',
 'negative_sentiment',
 'positive_sentiment',
 'rating',
 'sentiment']

df_data_columns = ['review_summary', 'product_facts', 'improvements_expected','issues_identified', "review",'anger_reason',  'delight_reason', 'disappointment_reason', 'time', 'season', 'weather', 'user_description','title','where_product_is_used','how_product_is_used']
df_index = df[df_index_columns].copy()
df_data = df[df_data_columns]
data_dict = df_data.to_dict(orient='records')
df_data_page = df_index.copy()
df_data_page['data'] = str(data_dict)
loader = DataFrameLoader(df_data_page, page_content_column='data')
documents = loader.load()






####### CREAT ASIN LIST

import pandas as pd

asin_list = ['B07XCRVK2Y', 'B07X7YFZWG', 'B07XCRT49W', 'B07Q899BPB', 'B07QXMLSS5', 'B01M4OV4Q4', 'B085Q4W3WX', 'B09R9MMW6J', 'B07ZJ8HRN8', 'B085Q3TLF8', 'B07ZJ8FDPK', 'B09VBZZ9C8']

# create a pandas dataframe
df = pd.DataFrame(asin_list, columns=['asin'])

# save the dataframe as a CSV file
df.to_csv('asin_list.csv', index=False)



################### Products 2A #######


# https://github.com/openai/openai-cookbook/blob/main/examples/How_to_format_inputs_to_ChatGPT_models.ipynb

User_Prompt_1 = """
PRODUCT TITLE and PRODUCT BULLETS from an ecommerce site \
delimited with triple backticks. ``` \
If information isn't present, use "unknown" value. \
Product Summary  : summary to give feedback to the \
product development department, responsible for researching \
and developing the product. Max 100 words. \

PRODUCT TITLE:```Magnetic board for children's learning and fun```

PRODUCT BULLETS: ```\
[" The included pencil works great to bring the magnet balls to the surface. \
It is very sturdy and has survived multiple drops."," \
Nice for a preschooler, love playing with it because of the satisfying \"click\" noises and the fun of a novel toy.\
"," Randomly doodles, practicing abcs and shapes, playing tic tac toe, or making more elaborate designs. Have fun with it!\
"," Magnetic boards are Really brilliant idea and innovative way of teaching child how to write, \
They are happy to trace the letters with this magnetic board and quickly learning letters and numbers.\
"," We bring it on long car rides, restaurant waiting for dinner, anywhere they need to be entertained. \
Much better for their brains than screen time! Each age uses it a bit differently which is neat to see.","\
MADE OF CHILD SAFE, NON-TOXIC, BPA-FREE and lead-free, tested in CPC accredited lab to ensure quality and safety"]\
```"""


AI_Prompt_1 = """\
{\
"Product Summary": "A durable magnetic board for children's learning and fun.\
Includes a pencil for magnet balls, offering a satisfying 'click' sound. \
Suitable for various ages and healthier than screen time.",\
"What is in the box": "Magnetic board , pencil",\
"Technical Facts": "Child safe, non-toxic, BPA-free, lead-free, tested in CPC accredited lab",\
"Features": "Satisfying 'click' noises, various uses (doodling, practicing letters and shapes, playing games)",\
"How the product is used": "Doodling, practicing letters/shapes, playing games",\
"Where the product is used": "Car rides, restaurants, entertainment situations",\
"User Description": "Preschoolers",\
"Packaging": "unknown",\
"Season": "unknown"\
}"""



chatbot_responses = dict()

GPT_MODEL = "gpt-3.5-turbo-0613"

for i in product.index:
    print(i)
    title  = product['title'][i]
    asin  = product['asin'][i]
    bullets = product['feature_bullets'][i]

    # Get the product review
    print(asin)
    print(bullets)
    print(title)

   function_args = json.loads(response_message["function_call"]["arguments"])
   function_response = fuction_to_call(
        location=function_args.get("location"),
        unit=function_args.get("unit"),
            )


    messages = [
        {"role": "system", "content": "You are a highly analytic product researcher in a product development team"},
        {"role": "user", "content": User_Prompt_1},
        {"role": "assistant", "content": AI_Prompt_1},
        {"role": "user", "content": f"PRODUCT TITLE:``` {title} ``` PRODUCT BULLETS:```{bullets}```"},
        {"role": "function", "name": "describe_product", "content": function_response,}

    ]

    print("""Send to gpt
          """)

    # Send the prompt to the chatbot and get the response
    response = openai.ChatCompletion.create(
        model=GPT_MODEL,
        messages=messages,
        functions=functions,
        function_call={"name": "describe_product"},
        temperature=0
    )

    # Process the response and store in the dictionary

    chatbot_responses[asin] = response["choices"][0]["message"]["function_call"]
    product.loc[i, 'product_description_data'] = chatbot_responses[asin]
    print(response["choices"][0]["message"]["function_call"])


###############################

