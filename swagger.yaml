###############
# Swagger API swagger.yaml#
# https://editor.swagger.io/
openapi: '3.0.0'
info:
  title: ProductExplorer
  version: '1.0'
  description: A sample API for product investigation.

paths:
  /start_investigation:
    post:
      operationId: src.main.api_start_investigation
      summary: Initiates a new investigation.
      description: |
        Initiates a new investigation based on the provided user ID and list of ASINs. 
        The investigation ID is auto-generated by the system.
      tags:
        - Start Investigation
      requestBody:
        required: true
        description: Investigation data required to initiate a new investigation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvestigationStart'
      responses:
        '200':
          description: Investigation started successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvestigationResponse'
        '400':
          description: Bad request. Missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error or processing error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

                    
  /run_data_acquisition:
    post:
      operationId: src.main.api_run_data_acquisition
      summary: Initiates data acquisition for a list of ASINs.
      description: |
        Initiates the data acquisition process for a list of ASINs. Fetches product details and reviews 
        for each ASIN using the Amazon Scraper API and updates the Firestore database with the fetched data.
      tags:
        - Data Acquisition
      requestBody:
        required: true
        description: List of ASINs required to initiate data acquisition.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataAcquisitionRequest'
      responses:
        '200':
          description: Data acquisition completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataAcquisitionResponse'
        '400':
          description: Bad request. Missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error or processing error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'



  /run_products_investigation:
    post:
      operationId: src.main.api_run_products_investigation
      summary: Initiates a product investigation.
      description: |
        Initiates a product investigation based on the provided investigation ID. 
        The process includes updating the investigation status, processing individual products, 
        and processing product descriptions.
      tags:
        - Investigation
      requestBody:
        required: true
        description: Investigation ID required to initiate a product investigation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductsInvestigationStart'
      responses:
        '200':
          description: Product investigation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProductsInvestigationResponse'
        '400':
          description: Bad request. Missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error or processing error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /run_reviews_investigation:
    post:
      operationId: src.main.api_run_reviews_investigation
      summary: Initiates a reviews investigation.
      description: |
        Initiates a reviews investigation based on the provided investigation ID. 
        The process includes processing reviews with GPT, clustering reviews, 
        labeling clusters, quantifying observations, and saving results to Firestore.
      tags:
        - Investigation
      requestBody:
        required: true
        description: Investigation ID required to initiate a reviews investigation.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewsInvestigationStart'
      responses:
        '200':
          description: Reviews investigation completed successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewsInvestigationResponse'
        '400':
          description: Bad request. Missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error or processing error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /run_end_to_end_investigation:
    post:
      operationId: src.main.api_run_end_to_end_investigation
      summary: Initiates an end-to-end investigation.
      description: |
        This endpoint initiates an end-to-end investigation based on the provided user ID and list of ASINs. 
        It encompasses the entire process from starting an investigation, fetching data, processing products, 
        and processing reviews.
      tags:
        - Investigation
      requestBody:
        required: true
        description: User ID and list of ASINs required to initiate the end-to-end investigation.
        content:
          application/json:
            schema:
              type: object
              required:
                - userId
                - asinList
              properties:
                userId:
                  type: string
                  description: The ID of the user.
                asinList:
                  type: array
                  items:
                    type: string
                  description: List of ASINs for the investigation.
      responses:
        '200':
          description: End-to-end investigation completed successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: A message indicating the status of the end-to-end investigation.
                    example: "End-to-end investigation completed successfully."
        '400':
          description: Bad request. Missing or invalid parameters.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A descriptive error message.
        '500':
          description: Internal server error or processing error.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: A descriptive error message.

  /create_user:
    post:
      operationId: src.main.api_create_user
      summary: Create a new user.
      description: |
        Register a new user in the system with the provided name and email. 
        The user ID is auto-generated by the system.
      tags:
        - User
      requestBody:
        required: true
        description: User data required to register a new user.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
        '400':
          description: Bad request. Missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /get_user:
    get:
      operationId: src.main.api_get_user
      summary: Retrieve user data.
      description: |
        Fetches the details of a user based on the provided user ID. 
        Returns the user's name, email, and other associated data.
      tags:
        - User
      parameters:
        - name: userId
          in: query
          description: The ID of the user to retrieve.
          required: true
          schema:
            type: string
            example: "abc123xyz"
      responses:
        '200':
          description: User data retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
        '404':
          description: User not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /log_payment:
    post:
      operationId: src.main.api_log_payment
      summary: Log a payment.
      description: |
        Logs a payment into the system. The payment ID is auto-generated by the system.
      tags:
        - Payment
      requestBody:
        required: true
        description: Payment data required to log a payment.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentLog'
      responses:
        '201':
          description: Payment logged successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaymentResponse'
        '400':
          description: Bad request. Missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /subscribe_user_to_package:
    post:
      operationId: src.main.api_subscribe_user_to_package
      summary: Subscribe a user to a package and update their investigation count.
      description: |
        Subscribes a user to a specified package and updates their remaining investigations based on the package type.
      tags:
        - User
      requestBody:
        required: true
        description: Subscription data required to subscribe a user to a package.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
      responses:
        '200':
          description: Subscription successful.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscriptionResponse'
        '400':
          description: Bad request. Missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  schemas:
    UserCreate:
      type: object
      required:
        - name
        - email
      properties:
        name:
          type: string
          description: The full name of the user.
          example: "John Doe"
        email:
          type: string
          format: email
          description: The email address of the user. It should be unique and valid.
          example: "john.doe@example.com"

    UserResponse:
      type: object
      properties:
        userId:
          type: string
          description: The auto-generated ID of the newly created user.
          example: "abc123xyz"
    
    UserDetails:
      type: object
      properties:
        id:
          type: string
          description: The ID of the user.
          example: "abc123xyz"
        name:
          type: string
          description: The full name of the user.
          example: "John Doe"
        email:
          type: string
          format: email
          description: The email address of the user.
          example: "john.doe@example.com"
    
    PaymentLog:
      type: object
      required:
        - userId
        - amount
        - timestamp
      properties:
        userId:
          type: string
          description: The ID of the user making the payment.
        amount:
          type: number
          format: float
          description: The amount of the payment.
        timestamp:
          type: string
          format: date-time
          description: The timestamp when the payment was made.

    PaymentResponse:
      type: object
      properties:
        paymentId:
          type: string
          description: The auto-generated ID of the logged payment.

    SubscriptionRequest:
      type: object
      required:
        - userId
        - package
        - startDate
        - paymentIntentId
      properties:
        userId:
          type: string
          description: The ID of the user subscribing to the package.
        package:
          type: string
          enum: [basic, premium]
          description: The type of package to which the user is subscribing.
        startDate:
          type: string
          format: date
          description: The start date of the subscription.
        paymentIntentId:
          type: string
          description: The payment intent ID associated with the subscription.

    SubscriptionResponse:
      type: object
      properties:
        message:
          type: string
          description: A message indicating the success of the subscription.
          example: "Subscription successful."

    InvestigationStart:
      type: object
      required:
        - userId
        - asinList
      properties:
        userId:
          type: string
          description: The ID of the user initiating the investigation.
        asinList:
          type: array
          items:
            type: string
          description: List of ASINs for the investigation.

    InvestigationResponse:
      type: object
      properties:
        id:
          type: string
          description: The auto-generated ID of the initiated investigation.
        userId:
          type: string
          description: The ID of the user who initiated the investigation.
        asinList:
          type: array
          items:
            type: string
          description: List of ASINs for the investigation.
        status:
          type: string
          description: The current status of the investigation.
          enum: [started]
        start_timestamp:
          type: string
          format: date-time
          description: The timestamp when the investigation was initiated.

    ProductsInvestigationStart:
      type: object
      required:
        - investigationId
      properties:
        investigationId:
          type: string
          description: The ID of the investigation to be processed.

    ProductsInvestigationResponse:
      type: object
      properties:
        message:
          type: string
          description: A message indicating the status of the product investigation.
          example: "Product investigation completed successfully."

    ReviewsInvestigationStart:
      type: object
      required:
        - investigationId
      properties:
        investigationId:
          type: string
          description: The ID of the investigation to be processed.

    ReviewsInvestigationResponse:
      type: object
      properties:
        message:
          type: string
          description: A message indicating the status of the reviews investigation.
          example: "Reviews investigation completed successfully."

    DataAcquisitionRequest:
      type: object
      required:
        - asinList
      properties:
        asinList:
          type: array
          items:
            type: string
          description: List of ASINs for data acquisition.
          example: ["B08X2324ZL", "B09MQ689XL"]

    DataAcquisitionResponse:
      type: object
      properties:
        message:
          type: string
          description: A message indicating the status of the data acquisition.
          example: "Data acquisition completed successfully."
    Error:
      type: object
      properties:
        error:
          type: string
          description: A descriptive error message.

#====================